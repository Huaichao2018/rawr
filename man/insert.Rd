% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{insert}
\alias{insert}
\alias{insert_matrix}
\title{Insert}
\usage{
insert(x, row = NULL, col = NULL, repl = NA)

insert_matrix(x, rowsep = NULL, colsep = NULL, rowrep = NA,
  colrep = rowrep)
}
\arguments{
\item{x}{a matrix}

\item{row, col}{index of row or column to shift right or down,
respectively}

\item{repl}{replacement values, recycled if needed}

\item{rowsep, colsep}{index of row or column to shift right or down,
respectively}

\item{rowrep, colrep}{row and column replacement values, recycled if needed;
note that rows are replaced first followed by columns, so for the opposite
behavior, transpose \code{m} before and after using \code{insert_matrix}
and swap \code{rowrep} and \code{colrep}; see examples}
}
\description{
Insert rows and/or columns into a matrix or elements into a vector at
specified indices. \code{insert} and \code{insert_matrix} are similar
functions with the latter defined to maintain existing code.
}
\examples{
## insert at index for vectors
insert(1:5, 4)
insert(1:5, 4, repl = 10)

m <- col(matrix(0, 5, 5))
insert_matrix(m, 2, c(2,4,4,4,6))

## anticipate number of values needed for replacement(s)
# insert_matrix(m, 4, 4:5, colrep = 1:ncol(m)) ## error
insert_matrix(m, 4, 4:5, colrep = 1:6)

## these are _almost_ identical -- rows are inserted first
insert_matrix(m, 5, 5, 0, 1) == t(insert_matrix(t(m), 5, 5, 1, 0))

}
