% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{rapply2}
\alias{rapply2}
\title{Recursively apply a function to a list}
\usage{
rapply2(l, FUN, classes = "any", ..., check.nested = "list" \%in\% classes)
}
\arguments{
\item{l}{a list}

\item{FUN}{the function to be applied to each \code{classes} element of
\code{l}}

\item{classes}{a character vector of \code{\link{class}} names or
\code{"any"} to apply to every non-\code{\link{list}} element of \code{l}}

\item{...}{additional arguments passed to \code{FUN}}

\item{check.nested}{logical; if \code{TRUE}, for nested lists,
\code{rapply2} will continue to walk down the list rather than stop at
the first list (only if \code{"list" \%in\% classes})}
}
\value{
A list having the same structure as \code{l} with \code{FUN} applied to
all (including nested) elements with a class matching \code{classes}.
}
\description{
Iterates over a (possibly nested) list and applies a function if a specific
\code{\link{class}} is found.
}
\examples{
ll <- list(list(list(head(cars), list(head(cars)))), letters[1:4],
           factor(1:4), 1:3, head(cars))
rapply2(ll, class)
rapply2(ll, log, classes = 'data.frame', base = 10)


## note that data.frames are not considered lists unless explicit
str(rapply2(ll, unlist, classes = 'list'))
str(rapply2(ll, unlist, classes = c('list', 'data.frame')))

## compare
str(rapply2(ll, unlist))


## remove all elements by name
f <- function(x) if (!is.null(names(x))) x[names(x) \%ni\% 'id'] else x
ll <- list(a = list(id = 1, name = 'a-1'),
           b = list(id = 1, list(id = 2, name = 'b-2'),
                    list(id = 3, name = 'b-3', id = 3)),
           c = list(id = 4),
           id = 'n/a')

## compare
str(rapply2(ll, f, 'list', check.nested = FALSE))
str(rapply2(ll, f, 'list', check.nested = TRUE))

}
\seealso{
\code{\link{rapply}}
}
